"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import logging.config
from os import getenv
from pathlib import Path

from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _

import sentry_sdk

sentry_sdk.init(
  dsn="https://f36730d912bd0494bf723b48354b622d@o4505583758606336.ingest.sentry.io/4505736693743616",
  traces_sample_rate=1.0
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
DATABASE_DIR = BASE_DIR / 'database'
DATABASE_DIR.mkdir(exist_ok=True)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-htdhb=i$9bu0y(rstox@u&%o6=ljnpgt4bi%9jon3#eyz3_584'
SECRET_KEY = getenv(
    'DJANGO_SECRET_KEY',
    'django-insecure-htdhb=i$9bu0y(rstox@u&%o6=ljnpgt4bi%9jon3#eyz3_584',
)

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = getenv('DJANGO_DEBUG', '0') == '1'

# ALLOWED_HOSTS = [
#     '0.0.0.0',
#     '127.0.0.1',
# ]

ALLOWED_HOSTS = [
    '0.0.0.0',
    '127.0.0.1',
] + getenv("DJANGO_ALLOWED_HOSTS", "").split(",")

# настройка доступа к приложению и debug_toolbar по внутренним IP адресам, так как через debug_toolbar можно получить
# доступ к особо важной информации
INTERNAL_IPS = [
    '127.0.0.1',
]

if DEBUG:
    import socket
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS.append('10.0.2.2')
    INTERNAL_IPS.extend(
        [ip[: ip.rfind('.')] + '.1' for ip in ips]
    )

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admindocs',
    'django.contrib.sitemaps',

    'debug_toolbar',
    'rest_framework',
    'django_filters',
    'drf_spectacular',

    'shopapp.apps.ShopappConfig',
    'requestdataapp.apps.RequestdataappConfig',
    'myauth.apps.MyauthConfig',
    'myapiapp.apps.MyapiappConfig',
    'blogapp.apps.BlogappConfig',
]

MIDDLEWARE = [
    # 'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.contrib.admindocs.middleware.XViewMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',

    'requestdataapp.middlewares.set_useragent_on_request_middleware',
    'requestdataapp.middlewares.CountRequestsMiddleware',

]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': DATABASE_DIR / 'db.sqlite3',
    }
}

# настройка кэша в бэкенде. Затем добавляются 2 middlewares:
# 'django.middleware.cache.UpdateCacheMiddleware' - в самое начало
# 'django.middleware.cache.FetchFromCacheMiddleware' - в конец

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',  # не хранит в себе ничего, но занимает место и выполняет те же методы, что и FileBasedCache
        # 'BACKENDS': 'django.core.cache.backends.filebased.FileBasedCache',  # место, где хранится кэш
        # # 'LOCATION': '/var/tmp/django.cache',
        # 'LOCATION': 'c:/Users/alexe/mycache',  # настройка расположения кэша на windows
    },
}

# настройка времени хранения кэша
CACHE_MIDDLEWARE_SECONDS = 200

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

USE_L10N = True  # подключение локализации

# путь, где будут храниться файлы с локализацией
LOCALE_PATHS = [
    BASE_DIR / 'locale'
]

# чтобы добавить несколько языков для перевода создаем такую переменную с языками
# чтобы перевести список названий языков на необходимый язык, используем gettext_lazy as _
# LANGUAGES = [
#     ('en', _('English')),
#     ('ru', _('Russian')),
# ]
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

MEDIA_URL = '/media/'  # путь, с помощью которого можно получить доступ к медиа файлам
MEDIA_ROOT = BASE_DIR / 'uploads'  # путь построен относительно пути к корню проекта. django построит путь к папке
# uploads и она будет находиться в корне проекта

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# указывается для LoginView в качестве адреса перенаправления по умолчанию
# LOGIN_REDIRECT_URL = '/admin/'

# указывается в качестве адреса перенаправления по умолчанию
# перенаправление после входа
LOGIN_REDIRECT_URL = reverse_lazy('myauth:about_me')

# перенаправление для входа (аутентификации) на страницу. По умолчанию это /accounts/login/
LOGIN_URL = reverse_lazy('myauth:login')

LOGLEVEL = getenv('DJANGO_LOGLEVEL', 'info').upper()

logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '%(asctime)s %(levelname)s [%(name)s:%(lineno)s] %(module)s %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console',
        },
    },
    'loggers': {
        '': {
            'level': LOGLEVEL,
            'handlers': [
                'console',
            ],
        },
    },
})

# Django Rest Framework
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# Настройка спецификации для DRF
SPECTACULAR_SETTINGS = {
    'TITLE': 'My site Project API.',
    'DESCRIPTION': 'My site shop app and custom auth.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

# настройка логов и их ротации: название выходного файла, его размер, сколько хранить лог файлов помимо текущего
LOGFILE_NAME = BASE_DIR / 'log.txt'
LOGFILE_SIZE = 1 * 1024 * 1024
LOGFILE_COUNT = 3

# в LOGGING указываются правила для логирования
# данные логи не должны быть активны в работе с пользователем, так как считаются небезопасными
# поэтому логи используются только в DEBUG - режиме
# Данная конфигурация LOGGING для вывода информации об SQL запросах
# LOGGING = {
#     'version': 1,
#     'filters': {
#         'require_debug_true': {
#             '()': 'django.utils.log.RequireDebugTrue',
#         },
#     },
#     'handlers': {
#         'console': {
#             'level': 'DEBUG',
#             'filters': ['require_debug_true'],
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         'django.db.backends': {
#             'level': 'DEBUG',
#             'handlers': ['console'],
#         },
#     },
# }

# Настройка логирования во views
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'logfile': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGFILE_NAME,
            'maxBytes': LOGFILE_SIZE,
            'backupCount': LOGFILE_COUNT,
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'logfile'],
        'level': 'INFO',
    },
}
